000. 		NOP
001. 		END
002. 		SLEEP

EEPROM
003.		INNER_PROG -- write only UART
004 - 007. 	I2C_WRITE
008 - 011. 	I2C_READ
012 - 015. 	INNER_READ

Operacje na rejestrach:
016 - 019.	LDR - load data to reg

IF:
020 - 023.	JUMP IF value in reg is not 0
024 - 027.	JUMP IF value in reg is 0
160 - 163.  JUMP IF LOW than reg
164 - 167.  JUMP IF GREAT then reg
168 - 171.  JUMP IF EQUAL OR LOW
172 - 175.  JUMP IF EQUAL OR GREAT

ALU:
028 - 031.	NOT value in reg

032 - 047.	ADD Rd + Rr : Rd
048 - 063.	SUB Rd - Rr : Rd

064 - 079.	OR  Rd | Rr : Rd
080 - 095.	AND Rd & Rr : Rd
096 - 111.	XOR Rd ^ Rr : Rd

Stack:
112 - 115.	PUSH reg
116 - 119.	POP to reg
120.	    JUMP WITH ADD from mem, first high, next low
121.        CALL to address from memory
122.        RET from subroutine
124 - 127.  SET EEPROM ADDRESS (high) reg + 1 (low) reg 

128 - 131.  SHIFT LEFT    reg
132 - 135.  SHIFT RIGHT   reg
136 - 139.  SHIFT 8 LEFT  reg
140 - 143.  SHIFT 8 RIGHT reg

Acc:
144 - 147.	READ from register and save it in reg. As address take value from reg
148 - 151.  READ AXIS to read AXIS or read from FIFO, in LOW byte of reg send number of axis: 
152 - 155.	WRITE to register from address in HIGH byte of reg data from LOW byte of reg
156 - 159.	CAL transition on axis in reg and return value in reg and reg + 1


Engine:
192.	    FORWARD
193.	    BACKWARD
195.        STOP

196.    	LEFT FORWARD
197.        LEFT BACKWARD
198.        RIGHT FORWARD
199.        RIGHT BACKWARD


200 - 203.  INC reg

204 - 207.	ROTATE	MSB - signed dir, and angle on 6-0b

TIMER:
208 - 211.	START in reg max value of interrupt
212 - 215.	STOP and return number of interrupt
216 - 219.	READ return counter value
220 - 223.	WAIT delay reg ms

224 - 227.  LED in out reg

ULTRASONIC:
228 - 231.	MEASURE return to reg
232 - 235.	ROTATE angle from reg
236 - 239.	BACK SENSOR READ to reg


UART & BT
240 - 243.	UART READ to reg
244 - 248.	UART SEND from reg
248 - 251.  UART SEND INT from reg



252 - 255.	DEVICE ENABLE reg



Wolne adresu:
194 
123
176 - 192

Empty INST: 